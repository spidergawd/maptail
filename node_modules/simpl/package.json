{
  "name": "simpl",
  "description": "Highly pluggable WebSockets framework",
  "version": "0.4.0",
  "homepage": "https://github.com/stagas/simpl",
  "author": {
    "name": "George Stagas",
    "email": "gstagas@gmail.com",
    "url": "http://stagas.com/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/stagas/simpl.git"
  },
  "main": "index",
  "dependencies": {
    "ws": "~0.4.7",
    "eventstack": "~0.2.0",
    "express": "~2.5.6",
    "express-expose": "~0.2.1"
  },
  "devDependencies": {
    "tap": "~0.0.14",
    "dnode": "~0.9.6"
  },
  "scripts": {
    "test": "tap test"
  },
  "engines": {
    "node": "~0.6.8"
  },
  "readme": "# simpl\n\nHighly pluggable WebSockets framework\n\n## Introduction\n\nsimpl is a framework over WebSockets, which allows extensions (or middleware)\nto be built that extend functionality with a clean and easy api.\n\n## Installation\n\n`npm install simpl`\n\n## Full-featured example\n\nServer:\n\n```javascript\nvar express = require('express')\nvar app = express.createServer()\napp.use(express.static(__dirname + '/public'))\n\nvar simpl = require('simpl');\nvar server = simpl.createServer(app);\n\nserver.use(simpl.uid());\nserver.use(simpl.rpc({\n  'multiply': function (a, b, callback) {\n    callback(a * b);\n  }\n}));\nserver.use(simpl.json());\nserver.use(simpl.log());\n\napp.listen(8080);\n```\n\nBrowser:\n\n```html\n<script src=\"/simpl.js\"></script>\n<script>\n  var simpl = require('simpl')\n  var client = simpl.createClient()\n    .use(simpl.uid())\n    .use(simpl.rpc('multiply'))\n    .use(simpl.json())\n    .use(simpl.log())\n</script>\n<input onkeyup=\"\n  client.remote.multiply(this.value, this.value, function (result) { \n    document.getElementById('result').innerHTML = result;\n  });\n\">\n<div id=\"result\"></div>\n```\n\n\n## API\n\n\n### Server\n\n\n**server = simpl.createServer(port[, host])**\n\nCreates a webserver with a websocket server attached to it and listens on `port`\nand `host`.\n\n**server = simpl.createServer(app)**\n\nAttaches a websocket server to an existing `express` server.\n\n\n\n### Server Methods\n\n**server.use(fn || 'event', fn )**\n\nUse an [EventStack](https://github.com/stagas/eventstack) middleware.\n\n**server.close()**\n\nCloses the server. In case where it's attached to a http server it closes the\nhttp server.\n\n\n\n### Server Events\n\n\n**ready**\n\nEmits when server is listening for connections.\n\n**connection (connection)**\n\nEmits when a client connects to the server. Callbacks a `Connection` object.\n\n**message (message, connection)**\n\nEmits when server receives a message.\n\n\n\n\n### Connection\n\n\n### Connection Methods\n\n\n**socket.send(message)**\n\nSends a message.\n\n**socket.close()**\n\nCloses a connection.\n\n\n\n### Connection Events\n\n\n**message (message)**\n\nEmits when a message is received.\n\n**close**\n\nEmits when the connection closes.\n\n\n\n\n### Client\n\n\n**client = simpl.createClient(port[, host])**\n\nCreates a client and connects to a websocket server on `port` and `host`.\n\n\n\n### Client Methods\n\n**client.use(fn || 'event', fn)**\n\nUse an [EventStack](https://github.com/stagas/eventstack) middleware.\n\n**client.send(message)**\n\nSends a message to the server.\n\n**client.close()**\n\nCloses the connection.\n\n\n\n### Client Events\n\n\n**connect**\n\nEmits when the client connects to the server.\n\n**message (message)**\n\nEmits when the client receives a message.\n\n\n## Middleware\n\n**[log](https://github.com/stagas/simpl/blob/master/lib/middleware/log.js)** -- Logs activity.\n\n**[uid](https://github.com/stagas/simpl/blob/master/lib/middleware/uid.js)** -- Provides a unique id to each outgoing message. Used by `rpc`.\n\n**[sid](https://github.com/stagas/simpl/blob/master/lib/middleware/sid.js)** -- Attach a unique id to the socket.\n\n**[track](https://github.com/stagas/simpl/blob/master/lib/middleware/track.js)** -- Keep track of connected clients.\n\n**[broadcast](https://github.com/stagas/simpl/blob/master/lib/middleware/broadcast.js)** -- Adds a `.broadcast` method to the sockets.\n\n**[json](https://github.com/stagas/simpl/blob/master/lib/middleware/json.js)** -- Send and receive objects (wrapper for `JSON.parse`/`stringify`). Used by almost all other middleware.\n\n**[date](https://github.com/stagas/simpl/blob/master/lib/middleware/date.js)** -- Adds a date field to each outgoing message, and parses incoming dates to native `Date` objects.\n\n**[rpc](https://github.com/stagas/simpl/blob/master/lib/middleware/rpc.js)** -- Remote Procedure Call. Used by `events`.\n\nExample:\n  \n_Server:_\n\n```javascript\nserver.use(simpl.rpc({\n  someMethod: function (x, y, z, callback) {\n    // do stuff\n    callback(result);\n  }\n}));\n```\n\n_Client:_\n\n```javascript\nclient.use(simpl.rpc('someMethod'))\nclient.on('connect', function () {\n  client.remote.someMethod('arg', 'arg', ..., function (result) {\n    // do something with the result\n  });\n})\n```\n\n**[events](https://github.com/stagas/simpl/blob/master/lib/middleware/events.js)** -- Emit events remotely.\n\nExample:\n\n_Server:_\n\n```javascript\nserver.use(simpl.events());\nserver.on('connection', function (socket) {\n  socket.remote.on('some event', function (data) {\n    // do something with the data\n  });\n});\n```\n\n_Client:_\n\n```javascript\nclient.use(simpl.events());\nclient.on('connect', function () {\n  client.remote.emit('some event', 'some data');\n});\n```\n\n**[dict](https://github.com/stagas/simpl/blob/master/lib/middleware/dict.js)** -- Dictionary (de)compressor.\n\nExample:\n\n```javascript\nvar dict = [\n  [ '{\"some\":\"big\",\"data\":\"thing\"}', '^a' ],\n  [ '{\"some\":\"other\",\"big\":\"data\"}', '^b' ]\n];\nserver.use(simpl.json());\nserver.use(simpl.dict(dict));\n```\nIt will replace all occurrences of the first string in each array with the second on\nan outgoing message and run in reverse order for incoming messages. It can significantly reduce\nbandwidth in cases where the same pattern gets repeated in I/O. Use simpl.log() to find\nstrings that are repeated often and copy & paste into the dictionary.\n\n\n## Licence\n\nMIT/X11\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/stagas/simpl/issues"
  },
  "_id": "simpl@0.4.0",
  "dist": {
    "shasum": "1d5b2f0d8186f44d7c4126984ffcd5252a58dab9"
  },
  "_from": "simpl@~0.4.0",
  "_resolved": "https://registry.npmjs.org/simpl/-/simpl-0.4.0.tgz"
}
